}
TrainLinearModel = function(features,featureNames,label)
{
df = features[featureNames];
predictions = c();
residuals = c();
labels = c();
for(i in 12:1)
{
num_rows = nrow(df)-i;
df_training = df[1:num_rows,];
label_training = label[1:num_rows];
df_testing = df[num_rows+1,];
label_testing = label[num_rows+1];
label_testing_prev = label[num_rows];
model = lm(label_training ~ ., data=df_training);
prediction = predict(model, newdata=df_testing);
predictions = c(predictions,prediction);
residuals = c(residuals, abs(prediction-label_testing[1]));
labels = c(labels, label_testing[1]);
}
return(list(predictions=predictions, residuals=residuals, labels=labels));
}
model = TrainLinearModel(featureFull_clean,currentFeatureNames,label)
model$predictions
model$residuals
model$labels
L1 = mean(model$residuals);
L1
L2 = sqrt(mean(model$residuals^2));
L2
model$residuals^2
consensusFull = read.csv(file="../../GroundTruth/Consensus.csv", head=TRUE, sep=",");
View(consensusFull)
View(consensusFull)
View(consensusFull)
for (i in 1:length(consensusFull$Date))
{
consensusFull$MonthId[i] = DateToMonthTag(consensusFull$Date[i]);
}
View(featureFull_clean)
View(consensusFull)
View(consensusFull)
consensusTesting = consensusFull[113:nrow(consensusTesting),];
consensusTesting = consensusFull[113:nrow(consensusFull),];
View(consensusTesting)
View(consensusTesting)
View(consensusTesting)
Win1 = sum(model$residuals<abs(consensusTesting$Consensus1-model$labels));
Win1
Win2 = sum(model$residuals<abs(consensus$Consensus2-model$labels));
Win2 = sum(model$residuals<abs(consensusTesting$Consensus2-model$labels));
Win2
model$residuals
abs(consensusTesting$Consensus1-model$labels)
ComputeWeightedWin = function(model, consensusTesting$Consensus1)
ComputeWeightedWin = function(model, consensus)
{
sum = 0;
for(i in 1:nrow(consensus))
{
if((model$predictions[i]-consensus[i])*(model$labels[i]-consensus[i])>0)
{
sum = sum+1;
}
else if(model$residuals[i]<abs(model$labels[i]-consensus[i]))
{
sum = sum+1;
}
}
return sum;
}
length(consensusTesting$Consensus1)
consensusTesting$Consensus1[1]
ComputeWeightedWin = function(model, consensus)
{
sum = 0;
for(i in 1:length(consensus))
{
if((model$predictions[i]-consensus[i])*(model$labels[i]-consensus[i])>0)
{
sum = sum+1;
}
else
{
if(model$residuals[i]<abs(model$labels[i]-consensus[i]))
{
sum = sum+1;
}
}
}
return sum;
}
ComputeWeightedWin = function(model, consensus)
{
sum = 0;
for(i in 1:length(consensus))
{
if((model$predictions[i]-consensus[i])*(model$labels[i]-consensus[i])>0)
{
sum = sum+1;
}
else
{
if(model$residuals[i]<abs(model$labels[i]-consensus[i]))
{
sum = sum+1;
}
}
}
return(sum);
}
WeightedWin1 = ComputeWeightedWin(model, consensusTesting$Consensus1);
WeightedWin1
WeightedWin1 = ComputeWeightedWin(model, consensusTesting$Consensus2);
WeightedWin1
etrics = ComputeMetrics(model, consensusTesting);
ComputeMetrics(model, consensus)
{
L1 = mean(model$residuals);
L2 = sqrt(mean(model$residuals^2));
Win1 = sum(model$residuals<abs(consensus$Consensus1-model$labels));
Win2 = sum(model$residuals<abs(consensus$Consensus2-model$labels));
WeightedWin1 = ComputeWeightedWin(model, consensus$Consensus1);
WeightedWin2 = ComputeWeightedWin(model, consensus$Consensus1);
return(c(L1,L2,Win1,Win2,WeightedWin1,WeightedWin2));
}
ComputeMetrics = function(model, consensus)
{
L1 = mean(model$residuals);
L2 = sqrt(mean(model$residuals^2));
Win1 = sum(model$residuals<abs(consensus$Consensus1-model$labels));
Win2 = sum(model$residuals<abs(consensus$Consensus2-model$labels));
WeightedWin1 = ComputeWeightedWin(model, consensus$Consensus1);
WeightedWin2 = ComputeWeightedWin(model, consensus$Consensus1);
return(c(L1,L2,Win1,Win2,WeightedWin1,WeightedWin2));
}
metrics = ComputeMetrics(model, consensusTesting);
metrics
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
metricList = data.frame();
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
metricList
View(metricList)
View(metricList)
colnames(metricList) = c("Featues","L1","L2","Win1","Win2","WeightedWin1","WeightedWin2");
View(metricList)
View(metricList)
source('learning.R')
warnings()
View(metricList)
View(metricList)
featureList
names(featureList)
rm(metricList)
metricList=list()
for(name in names(featureList))
{
currentFeatureNames = featureList[[name]];
currentModel = TrainLinearModel(features,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensus);
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
}
for(name in names(featureList))
{
currentFeatureNames = featureList[[name]];
currentModel = TrainLinearModel(featureFull_clean,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensus);
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
}
for(name in names(featureList))
{
currentFeatureNames = featureList[[name]];
currentModel = TrainLinearModel(featureFull_clean,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensusTesting);
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
}
View(metricList)
View(metricList)
View(metricList)
colnames(metricList) = c("Featues","L1","L2","Win1","Win2","WeightedWin1","WeightedWin2");
View(metricList)
View(metricList)
rm(list=ls())
source('learning.R')
rm(metricList)
metricList = CompileTrainingResults(featureFull_clean, featureList, label, consensusTesting);
rm(metricList)
metricList = data.frame();
for(name in names(featureList))
{
currentFeatureNames = featureList[[name]];
currentModel = TrainLinearModel(featureFull_clean,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensusTesting);
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
}
featureList[[name]]
currentFeatureNames = featureList[[name]];
currentModel = TrainLinearModel(featureFull_clean,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensusTesting);
metrics
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
metricList
c(paste(currentFeatureNames,collapse="+"),metrics)
metricList = data.frame()
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics))
metricList
View(metricList)
View(metricList)
View(metricList)
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics))
View(metricList)
View(metricList)
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics))
View(metricList)
View(metricList)
names(featureList)
currentFeatureNames = featureList[["featurenames_Month1"]];
currentModel = TrainLinearModel(features,currentFeatureNames,label);
currentModel = TrainLinearModel(featureFull_clean,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensus);
metrics = ComputeMetrics(currentModel, consensusTesting);
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
source('learning.R')
source('learning.R')
warnings()
metricList = CompileTrainingResults(featureFull_clean, featureList, label, consensusTesting);
source('learning.R')
rm(metricList)
source('learning.R')
View(metricList)
View(metricList)
View(metricList)
source('learning.R')
source('learning.R')
source('learning.R')
c(paste(currentFeatureNames,collapse="+"),metrics,stringsAsFactors=FALSE)
c(paste(currentFeatureNames,collapse="+"),metrics)
l=as.data.frame(c(paste(currentFeatureNames,collapse="+"),metrics))
l
l=as.data.frame(c(paste(currentFeatureNames,collapse="+"),metrics), stringsAsFactors=FALSE)
l
metricList = rbind(metricList,l)
View(metricList)
View(metricList)
View(l)
View(l)
View(l)
c(paste(currentFeatureNames, collapse = "+"), metrics)
as.list(c(paste(currentFeatureNames, collapse = "+"), metrics),stringsAsFactors=FALSE)
View(metricList)
View(metricList)
c(paste(currentFeatureNames, collapse = "+"), metrics)
rbind(metricList, c(paste(currentFeatureNames, collapse = "+"), metrics))
?rbind
options(stringsAsFactors = FALSE)
rbind(metricList, c(paste(currentFeatureNames, collapse = "+"), metrics))
metrics
rbind(metricList, as.data.frame(c(paste(currentFeatureNames, collapse = "+"), metrics),stringsAsFactors=FALSE))
metricList = data.frame()
rbind(metricList, as.data.frame(c(paste(currentFeatureNames, collapse = "+"), metrics),stringsAsFactors=FALSE))
metricList = data.frame()
cbind(metricList, as.data.frame(c(paste(currentFeatureNames, collapse = "+"), metrics),stringsAsFactors=FALSE))
rbind(metricList, as.data.frame(c(paste(currentFeatureNames, collapse = "+"), metrics),stringsAsFactors=FALSE))
?reshape
consensusTesting = consensusFull[113:nrow(consensusFull),];
metricList = data.frame();
for(name in names(featureList))
{
currentFeatureNames = featureList[[name]];
currentModel = TrainLinearModel(features,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensus);
metricList = rbind(metricList, as.data.frame(c(paste(currentFeatureNames,collapse="+"),metrics),stringsAsFactors=FALSE));
}
for(name in names(featureList))
{
currentFeatureNames = featureList[[name]];
currentModel = TrainLinearModel(featureFull_clean,currentFeatureNames,label);
metrics = ComputeMetrics(currentModel, consensusTesting);
metricList = rbind(metricList, c(paste(currentFeatureNames,collapse="+"),metrics));
}
metricList
View(metricList)
View(metricList)
colnames(metricList) = c("Featues","L1","L2","Win1","Win2","WeightedWin1","WeightedWin2");
View(metricList)
View(metricList)
write.csv(metricList, file = "../../Model/experiments.csv");
featureFull = merge(featureAR,featureSocial,by="MonthId");
View(featureFull)
View(featureFull)
View(featureFull)
View(featureAR)
View(featureAR)
featureSocialFull
feature08=featureSocialFull[41]
feature08
feature08=featureSocialFull[41,]
feature08
View(featureFull)
View(featureFull)
View(featureFull_clean)
View(featureFull_clean)
View(featureARFull)
View(featureARFull)
feature08_full = c(c(OneMonthBefore=209,TwoMonthBefore=288,ThreeMonthBefore=217),feature08)
feature08_full
View(feature08)
View(feature08)
feature08_full = c(c(OneMonthBefore=209,TwoMonthBefore=288,ThreeMonthBefore=217),feature08[,4:ncol(feature08)])
feature08_full
View(featureSocial_clean)
rm(list=ls())
featureNames_NumVerifiedTweets = c("NumVerifiedTweets_Month1","NumVerifiedTweets_Month2","NumVerifiedTweets_Month3","NumVerifiedTweets_Month4","NumVerifiedTweets_Week1","NumVerifiedTweets_Week2","NumVerifiedTweets_Week3","NumVerifiedTweets_Week4")
featureNames_AR = c("OneMonthBefore","TwoMonthBefore","ThreeMonthBefore");
AR_NumVerifiedTweets = c(featureNames_AR,featureNames_NumVerifiedTweets)
AR_NumVerifiedTweets
source('learning.R')
source('learning.R')
source('learning.R')
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
View(metricList)
View(metricList)
?which
a = c(1,2,3,4)
a = a[which(x==4)]
a = a[which(a==4)]
a
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
source('learning.R')
source('learning.R')
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
View(featureSocial_clean)
View(metricList)
source('learning.R')
warnings()
length(consensusTesting$Consensus1)
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
View(metricList)
View(metricList)
source('learning.R')
source('learning.R')
View(metricList)
View(metricList)
View(featureARFull)
View(featureARFull)
rm(list=ls())
source('correlation.R')
source('correlation.R')
correlations
a1 = c(1,2,3)
a2 = list(1,2)
a3 = c(a1,a2)
a3
a1
a3 = c(a2,a1)
a3
a3[[1]]=c(a3[[1]],10)
a3
names(featureSocial_clean)
label
a1 = c(name1=1,name2=2)
a1
a2 = list(name3=1,name4=2)
a2
a3 = c(a1,a2)
a3
names = c("name1","name2")
a3 = c(names[i]=a2[i])
a3 = c(names[1]=a2[1])
a3 = c(names=a2[1])
a3
a3 = c(names=a2[1],names=a2[2])
a3
source('correlation.R')
corr
?cor
typeof(cor)
source('correlation.R')
corr
rm(list=ls())
featureARFull = read.csv(file="ARDelta_Full.csv", head=TRUE, sep=",");
featureSocialFull = read.csv(file="../201408/DaysBack_7_Features_Window2.csv", head=TRUE, sep=",");
View(featureSocialFull)
View(featureSocialFull)
prev = featureSocialFull[1,]
typeof(prev)
typeof(featureSocialFull)
View(prev)
View(prev)
current = featureSocialFull[2,]
current-prev
current[2:ncol(current)]
current[3:ncol(current)]
current[3:ncol(current)]-prev[,3:ncol(current)]
current[3:ncol(current)][1]-prev[,3:ncol(current)][1]
as.list(current[3:ncol(current)]-prev[,3:ncol(current)])
as.vector(current[3:ncol(current)]-prev[,3:ncol(current)])
c(X.Field.candidate="candidate")
header = current[1:2]
c(header,current[3:ncol(current)]-prev[,3:ncol(current)])
source('getDelta.R')
View(deltaFeatureFull)
View(deltaFeatureFull)
View(deltaFeatureFull)
source('getDelta.R')
source('getDelta.R')
View(featureARFull)
View(featureARFull)
source('correlation.R')
View(featureSocial_clean)
View(featureSocial_clean)
source('correlation.R')
View(corr)
View(corr)
View(featureSocial)
View(featureSocial)
View(corr)
source('correlation.R')
View(corr)
corrAR = cor(featureAR_clean[2:4],label)
View(corrAR)
View(corrAR)
??log
:log
?log
log(10)
log(10,10)
log10(10)
c=c(1,2,3,4,5)
log10(c)
source('getLog.R')
source('getLog.R')
View(logvalue)
View(logvalue)
View(featureSocialFull)
View(featureSocialFull)
nrow(featureSocialFull)
current = featureSocialFull[4,]
current
logvalue = log10(current[3:ncol(current)]);
logvalue
header = current[1:2];
logFeatureFull = rbind(logFeatureFull, c(header,logvalue));
View(logFeatureFull)
View(logFeatureFull)
source('getLog.R')
View(logFeatureFull)
View(logFeatureFull)
source('correlation.R')
View(corr)
View(corr)
source('getDelta.R')
View(delta)
View(delta)
View(deltaFeatureFull)
View(deltaFeatureFull)
source('getDelta.R')
View(logFeatureFull)
View(logFeatureFull)
View(deltaFeatureFull)
View(deltaFeatureFull)
> source('getDelta.R')
source('correlation.R')
View(corr)
View(corr)
source('getLog.R')
source('getDelta.R')
View(logFeatureFull)
View(logFeatureFull)
View(corr)
View(corr)
consensus_raw = read.csv(file="C:\\Users\\yuzhan\\SkyDrive\\Data\\BingPrediction\\NonFarmPayroll\\GroundTruth\\Consensus_Initial.csv")
consensus_raw
cor(consensus_raw[[1]],consensus[[2]])
cor(consensus_raw[[1]],consensus_raw[[2]])
lm(consensus_raw[[1]]~consensus_raw[[2]])
model=lm(consensus_raw[[1]]~consensus_raw[[2]])
summary(model)
residual(model)
resid(model)
source('learning.R')
source('learning.R')
source('learning.R')
