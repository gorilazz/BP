deltaFeatureFull = rbind(deltaFeatureFull, c(header$WeekId,delta));
deltaFeatureFull
j=4
prev = featureSocialFull[j-1,];
current = featureSocialFull[j,];
header = current[1];
delta = current[2:ncol(current)] - prev[2:ncol(current)];
deltaFeatureFull = rbind(deltaFeatureFull, c(header$WeekId,delta));
deltaFeatureFull = rbind(deltaFeatureFull, c(header,delta));
names(deltaFeatureFull)
names(deltaFeatureFull) = names(featureSocialFull);
deltaFeatureFull = rbind(deltaFeatureFull, c(header,delta));
deltaFeatureFull$WeekId
deltaFeatureFull = rbind(deltaFeatureFull, c(header$WeekId,delta), stringsAsFactors=FALSE);
deltaFeatureFull = rbind(deltaFeatureFull, c(header,delta), stringsAsFactors=FALSE);
a = data.frame()
a[1,] = c("lunch",20)
deltaFeatureFull = data.frame(matrix(ncol=ncol(featureSocialFull)),stringsAsFactors=FALSE);
j=10
prev = featureSocialFull[j-1,];
current = featureSocialFull[j,];
prev
current
header = current[1];
header
delta = current[2:ncol(current)] - prev[2:ncol(current)];
deltaFeatureFull = rbind(deltaFeatureFull, c(header,delta));
names(deltaFeatureFull) = names(featureSocialFull);
names(deltaFeature)
names(deltaFeatureFull)
deltaFeatureFull = rbind(deltaFeatureFull, c(header,delta));
j=20
prev = featureSocialFull[j-1,];
current = featureSocialFull[j,];
header = current[1];
delta = current[2:ncol(current)] - prev[2:ncol(current)];
deltaFeatureFull = rbind(deltaFeatureFull, c(header,delta));
nrow(deltaFeatureFull)
source('getDelta.R')
source('getDelta.R')
source('combineLogAndLogDelta.R')
source('generateEnsembleModel.R')
socialOnly = T;    #use social and AR features when T; use web features as well when F
DirectionalWinThreshold=23;
WinThreshold=23;
#readin data & initialization
path_featureAR = "../Features/AR/Features_AR_Delta.csv";
path_featureSocial = "../Features/201410/Features_All_candiate_seperated_AbsoluteFull.csv";
#path_featureWeb = "../Features/201408/Web_Log.csv";
path_consensus = "../GroundTruth/Consensus.csv";
path_ARSocialMetric = "../Model/201409/experiments_Model_2.csv";
#path_ARSocialWebMetric = "../Model/experiments_AR_Social_Web_Full.csv";
path_outMetric = paste("../Model/201409/experiments_Model_2_NoConsensus_Ensemble",paste(DirectionalWinThreshold,"Metric.csv",sep='_'),sep='_');
path_outPredictions = paste("../Model/201409/experiments_Model_2_NoConsensus_Ensemble",paste(DirectionalWinThreshold,"Prediction.csv",sep='_'),sep='_');
if(socialOnly==T)
{
path_inMetric = path_ARSocialMetric;
} else
{
path_inMetric = path_ARSocialWebMetric;
}
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
featureARFull$Date
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
featureARFull$Date
featureARFull
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
featureARFull$Date
source('generateEnsembleModel.R')
predictions
candidateCombo
candidateCombos
candidate
candidate = CurrentMetric[CurrentMetric$DirectionalWin>=DirectionalWinThreshold,];
candidate
candidate = candidate[candidate$Win>=WinThreshold,];
source('generateEnsembleModel.R')
candidate
candidateCombos
label
featureFull
currentFeatureCombo = candidateCombos[[1]];
currentFeatureCombo
df = featureFull[currentFeatureCombo];
label
currentModel = ModelTraining(df,currentFeatureCombo,label);
predictions = c();
residuals = c();
labels = c();
i=37
num_rows = nrow(df)-i;
df_training = df[1:num_rows,];
label_training = label[1:num_rows];
df_testing = df[num_rows+1,];
label_testing = label[num_rows+1];
label_training
num_rows
result = LinearRegression(df_training, df_testing, label_training);
length(df_training)
length(df_testing)
nrow(df_training)
nrow(df_testing)
length(label_training)
result = LinearRegression(df_training, df_testing, label_training);
source('generateEnsembleModel.R')
source('generateEnsembleModel.R')
write.csv(metricList, file = path_outMetric);
write.csv(predictions, file = path_outPredictions);
metricList
metrics_median = GenerateEnsembleModel(predictions,label,consensus,'median');
metrics_median
metrics_mean = GenerateEnsembleModel(predictions,label,consensus,'mean');
metrics_mean
metrics_median = GenerateEnsembleModel(predictions,label,consensus,'median');
metricList[1,] <- c("median",metrics_median);
metrics_mean = GenerateEnsembleModel(predictions,label,consensus,'mean');
metricList[2,] <- c("mean",metrics_mean);
write.csv(metricList, file = path_outMetric);
path_featureAR = "../Features/AR/Features_AR_Delta.csv";
path_featureSocial = "../Features/201410/Features_All_candiate_seperated_AbsoluteFull.csv";
path_consensus = "../GroundTruth/Consensus.csv";
path_outMetric = "../Model/201409/experiments_AR_Model_2.csv";
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
for(i in 1:nrow(featureARFull))
{
featureARFull[i,'WeekId'] = DateToWeekTag(featureARFull[i,'Date']);
}
featureSocialFull = read.csv(file=path_featureSocial, head=TRUE, sep=",");
featureSocialFull$WeekId = as.character(featureSocialFull$WeekId)
for(i in 1:nrow(featureSocialFull))
{
featureSocialFull[i,'WeekId'] = DateToWeekTag(featureSocialFull[i,'WeekId']);
}
consensusFull = read.csv(file=path_consensus, head=TRUE, sep=",");
consensusFull$Date = as.character(consensusFull$Date)
for(i in 1:nrow(consensusFull))
{
consensusFull[i,'WeekId'] = DateToWeekTag(consensusFull[i,'Date']);
}
start_date = "20120106";
end_date = "20141010";
start_consensus_testing = "20140131";
end_consensus_testing = "20141003";
featureAR = featureARFull[which(featureARFull$WeekId==start_date)[1]:which(featureARFull$WeekId==end_date)[1],];
featureSocial = featureSocialFull[which(featureSocialFull$WeekId==start_date)[1]:which(featureSocialFull$WeekId==end_date)[1],];
featureConsensus = consensusFull[which(consensusFull$WeekId==start_date)[1]:which(consensusFull$WeekId==end_date)[1],];
consensus = consensusFull[which(consensusFull$WeekId==start_consensus_testing)[1]:which(consensusFull$WeekId==end_consensus_testing)[1],];
label = featureAR$Label;
length(consensusTesting)
length(consensus)
nrow(consensus)
source('learning.R')
source('learning.R')
debug(LinearRegression)
debug(ModelTraining)
metricList = CompileTrainingResults(featureFull,featureFullCombos,label,consensus);
df_training
df_testing
feature_training
label
length(feature_training)
length(label)
source('utility.R')
debug(LinearRegression)
metricList = CompileTrainingResults(featureFull,featureFullCombos,label,consensus);
metricList = CompileTrainingResults(featureFull,featureFullCombos,label,consensus);
names(feature_training)
feature_training
debug(modelTraining)
debug(ModelTraining)
metricList = CompileTrainingResults(featureFull,featureFullCombos,label,consensus);
names(df)
df_training
names(df_training)
names(df)
typeof(df)
typeof(df_training)
df
df_training = df[1:num_rows,];
df_training
df = df[1]
df
df_training = df[1:num_rows,]
df_training
typeof(df)
df
df_training=df[1:2,]
df_training
df_testing = df[num_rows+1,];
df_testing
a = data.frame(type=c(1,2,3,4,5,6,7))
a
b = a[1:3,]
b
b = a[1:3,]
b
source('learning.R')
source('processFeatures.R')
warnings()
source('getDelta.R')
i=1
input_path = paste(input_paths[i],'_Absolute.csv',sep='');
output_path = paste(input_paths[i],'_AbsoluteDelta.csv',sep='');
featureSocialFull = read.csv(file=input_path, head=TRUE, sep=",");
featureSocialFull$WeekId = as.character(featureSocialFull$WeekId);
deltaFeatureFull = data.frame(matrix(ncol=ncol(featureSocialFull)),stringsAsFactors=FALSE);
deltaFeatureFull
deltaFeatureFull[complete.cases(deltaFeatureFull),]
source('getDelta.R')
source('combineLogAndLogDelta.R')
source('learning.R')
source('learning.R')
path_outMetric = "../Model/201410/experiments_AR_Model_2.csv";
write.csv(metricList, file = path_outMetric);
library(glmnet)
rm(list=ls())
load("QSExample.RData")
library(glmnet)
load("QSExample.RData")
x = matrix(rnorm(100*20),100,20)
y = rnorm(100)
fit1 = glmnet(x,y)
deviance(fit1)
plot(fit)
plot(fit1)
plot(fit1,label=TRUE)
print(fit1)
coef(fit1,s=0.1)
cvfit = cv.glmnet(x,y)
plot(cvfit)
cvfit@lambda.min
cvfit$lambda.min
cvfit$lambda.max
cvfit$lambda.lse
cvfit$lambda.1se
fit = glmnet(x,y,alpha=0.2,weights = c(rep(1,50),rep(2,50)),nlambda=20)
fit
re[(1,50)]
rep(1,50)
rep(2,50)
path_featureAR = "../Features/AR/Features_AR_Delta.csv";
path_featureSocial = "../Features/201410/Features_All_candiate_seperated_AbsoluteFull.csv";
path_consensus = "../GroundTruth/Consensus.csv";
path_outMetric = "../Model/201410/experiments_AR_Model_2.csv";
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
for(i in 1:nrow(featureARFull))
{
featureARFull[i,'WeekId'] = DateToWeekTag(featureARFull[i,'Date']);
}
featureSocialFull = read.csv(file=path_featureSocial, head=TRUE, sep=",");
featureSocialFull$WeekId = as.character(featureSocialFull$WeekId)
for(i in 1:nrow(featureSocialFull))
{
featureSocialFull[i,'WeekId'] = DateToWeekTag(featureSocialFull[i,'WeekId']);
}
consensusFull = read.csv(file=path_consensus, head=TRUE, sep=",");
consensusFull$Date = as.character(consensusFull$Date)
for(i in 1:nrow(consensusFull))
{
consensusFull[i,'WeekId'] = DateToWeekTag(consensusFull[i,'Date']);
}
start_date = "20120106";
end_date = "20141010";
start_consensus_testing = "20140131";
end_consensus_testing = "20141003";
featureAR = featureARFull[which(featureARFull$WeekId==start_date)[1]:which(featureARFull$WeekId==end_date)[1],];
featureSocial = featureSocialFull[which(featureSocialFull$WeekId==start_date)[1]:which(featureSocialFull$WeekId==end_date)[1],];
featureConsensus = consensusFull[which(consensusFull$WeekId==start_date)[1]:which(consensusFull$WeekId==end_date)[1],];
consensus = consensusFull[which(consensusFull$WeekId==start_consensus_testing)[1]:which(consensusFull$WeekId==end_consensus_testing)[1],];
label = featureAR$Label;
#prepare feature combos
featureARCombos = PrepareFeatureCombos_AR(featureAR);
featureSocialCombos = PrepareFeatureCombos_Social();
featureConsensusCombos = PrepareFeatureCombos_Consensus();
featureFull = merge(featureAR, featureSocial, by="WeekId");
featureFull = merge(featureFull, featureConsensus, by="WeekId");
source('utility.R')
path_featureAR = "../Features/AR/Features_AR_Delta.csv";
path_featureSocial = "../Features/201410/Features_All_candiate_seperated_AbsoluteFull.csv";
path_consensus = "../GroundTruth/Consensus.csv";
path_outMetric = "../Model/201410/experiments_AR_Model_2.csv";
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
for(i in 1:nrow(featureARFull))
{
featureARFull[i,'WeekId'] = DateToWeekTag(featureARFull[i,'Date']);
}
featureSocialFull = read.csv(file=path_featureSocial, head=TRUE, sep=",");
featureSocialFull$WeekId = as.character(featureSocialFull$WeekId)
for(i in 1:nrow(featureSocialFull))
{
featureSocialFull[i,'WeekId'] = DateToWeekTag(featureSocialFull[i,'WeekId']);
}
consensusFull = read.csv(file=path_consensus, head=TRUE, sep=",");
consensusFull$Date = as.character(consensusFull$Date)
for(i in 1:nrow(consensusFull))
{
consensusFull[i,'WeekId'] = DateToWeekTag(consensusFull[i,'Date']);
}
start_date = "20120106";
end_date = "20141010";
start_consensus_testing = "20140131";
end_consensus_testing = "20141003";
featureAR = featureARFull[which(featureARFull$WeekId==start_date)[1]:which(featureARFull$WeekId==end_date)[1],];
featureSocial = featureSocialFull[which(featureSocialFull$WeekId==start_date)[1]:which(featureSocialFull$WeekId==end_date)[1],];
featureConsensus = consensusFull[which(consensusFull$WeekId==start_date)[1]:which(consensusFull$WeekId==end_date)[1],];
consensus = consensusFull[which(consensusFull$WeekId==start_consensus_testing)[1]:which(consensusFull$WeekId==end_consensus_testing)[1],];
label = featureAR$Label;
#prepare feature combos
featureARCombos = PrepareFeatureCombos_AR(featureAR);
featureSocialCombos = PrepareFeatureCombos_Social();
featureConsensusCombos = PrepareFeatureCombos_Consensus();
featureFull = merge(featureAR, featureSocial, by="WeekId");
featureFull = merge(featureFull, featureConsensus, by="WeekId");
source('learning.R')
path_featureAR = "../Features/AR/Features_AR_Delta.csv";
path_featureSocial = "../Features/201410/Features_All_candiate_seperated_AbsoluteFull.csv";
path_consensus = "../GroundTruth/Consensus.csv";
path_outMetric = "../Model/201410/experiments_AR_Model_2.csv";
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
for(i in 1:nrow(featureARFull))
{
featureARFull[i,'WeekId'] = DateToWeekTag(featureARFull[i,'Date']);
}
featureSocialFull = read.csv(file=path_featureSocial, head=TRUE, sep=",");
featureSocialFull$WeekId = as.character(featureSocialFull$WeekId)
for(i in 1:nrow(featureSocialFull))
{
featureSocialFull[i,'WeekId'] = DateToWeekTag(featureSocialFull[i,'WeekId']);
}
consensusFull = read.csv(file=path_consensus, head=TRUE, sep=",");
consensusFull$Date = as.character(consensusFull$Date)
for(i in 1:nrow(consensusFull))
{
consensusFull[i,'WeekId'] = DateToWeekTag(consensusFull[i,'Date']);
}
start_date = "20120106";
end_date = "20141010";
start_consensus_testing = "20140131";
end_consensus_testing = "20141003";
featureAR = featureARFull[which(featureARFull$WeekId==start_date)[1]:which(featureARFull$WeekId==end_date)[1],];
featureSocial = featureSocialFull[which(featureSocialFull$WeekId==start_date)[1]:which(featureSocialFull$WeekId==end_date)[1],];
featureConsensus = consensusFull[which(consensusFull$WeekId==start_date)[1]:which(consensusFull$WeekId==end_date)[1],];
consensus = consensusFull[which(consensusFull$WeekId==start_consensus_testing)[1]:which(consensusFull$WeekId==end_consensus_testing)[1],];
label = featureAR$Label;
#prepare feature combos
featureARCombos = PrepareFeatureCombos_AR(featureAR);
featureSocialCombos = PrepareFeatureCombos_Social();
featureConsensusCombos = PrepareFeatureCombos_Consensus();
featureFull = merge(featureAR, featureSocial, by="WeekId");
featureFull = merge(featureFull, featureConsensus, by="WeekId");
#readin data & initialization
path_featureAR = "../Features/AR/Features_AR_Delta.csv";
path_featureSocial = "../Features/201410/Features_All_candiate_seperated_AbsoluteFull.csv";
path_consensus = "../GroundTruth/Consensus.csv";
path_outMetric = "../Model/201410/experiments_AR_Model_2.csv";
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
for(i in 1:nrow(featureARFull))
{
featureARFull[i,'WeekId'] = DateToWeekTag(featureARFull[i,'Date']);
}
featureSocialFull = read.csv(file=path_featureSocial, head=TRUE, sep=",");
featureSocialFull$WeekId = as.character(featureSocialFull$WeekId)
for(i in 1:nrow(featureSocialFull))
{
featureSocialFull[i,'WeekId'] = DateToWeekTag(featureSocialFull[i,'WeekId']);
}
consensusFull = read.csv(file=path_consensus, head=TRUE, sep=",");
consensusFull$Date = as.character(consensusFull$Date)
for(i in 1:nrow(consensusFull))
{
consensusFull[i,'WeekId'] = DateToWeekTag(consensusFull[i,'Date']);
}
start_date = "20120106";
end_date = "20141010";
start_consensus_testing = "20140131";
end_consensus_testing = "20141003";
featureAR = featureARFull[which(featureARFull$WeekId==start_date)[1]:which(featureARFull$WeekId==end_date)[1],];
featureSocial = featureSocialFull[which(featureSocialFull$WeekId==start_date)[1]:which(featureSocialFull$WeekId==end_date)[1],];
featureConsensus = consensusFull[which(consensusFull$WeekId==start_date)[1]:which(consensusFull$WeekId==end_date)[1],];
consensus = consensusFull[which(consensusFull$WeekId==start_consensus_testing)[1]:which(consensusFull$WeekId==end_consensus_testing)[1],];
label = featureAR$Label;
featureFull = merge(featureAR, featureSocial, by="WeekId");
featureFull = merge(featureFull, featureConsensus, by="WeekId");
view(featureFull)
View(featureFull)
View(featureFull)
View(featureSocial)
View(featureSocial)
View(featureARFull)
View(featureARFull)
View(consensusFull)
View(consensusFull)
featureFull = featureFull[, -c("Date.x")];
featureFull = subset(featureFull, select=-c("Date.x"));
featureFull = subset(featureFull, select=-c(Date.x));
View(featureFull)
View(featureFull)
nrow(featureFull)
bound = floor(nrow(df)/4*3)
bound
bound = floor(nrow(featureFull)/4*3)
bound
df = df[sample(nrow(featureFull)),]
sample
df = featureFull[sample(nrow(featureFull)),]
df
featureFull = subset(featureFull, select=-c(Date.x,Date.y));
featureFull = subset(featureFull, select=-c(Date.y));
bound = floor(nrow(featureFull)/4*3);
featureFull = featureFull[sample(nrow(featureFull)),];
data_training = featureFull[1:bound,];
data_testing = featureFull[(bound+1):nrow(featureFull),];
nrow(data_training)
nrow(data_testing)
View(data_training)
View(data_training)
y_training = data_training$Label;
y_testing = data_testing$Label;
x_training = subset(data_training, select=-c(WeekId,Label));
x_testing = subset(data_testing, select=-c(WeekId,Label));
x_training$row.name
x_training$row.names
start_date = "20120106";
end_date = "20141010";
start_consensus_testing = "20140131";
end_consensus_testing = "20141003";
featureAR = featureARFull[which(featureARFull$WeekId==start_date)[1]:which(featureARFull$WeekId==end_date)[1],];
featureSocial = featureSocialFull[which(featureSocialFull$WeekId==start_date)[1]:which(featureSocialFull$WeekId==end_date)[1],];
featureConsensus = consensusFull[which(consensusFull$WeekId==start_date)[1]:which(consensusFull$WeekId==end_date)[1],];
consensus = consensusFull[which(consensusFull$WeekId==start_consensus_testing)[1]:which(consensusFull$WeekId==end_consensus_testing)[1],];
featureFull = merge(featureAR, featureSocial, by="WeekId");
featureFull = merge(featureFull, featureConsensus, by="WeekId");
featureFull = subset(featureFull, select=-c(Date.x,Date.y));
# Partition data into training and testing sets
bound = floor(nrow(featureFull)/4*3);
featureFull = featureFull[sample(nrow(featureFull)),];
data_training = featureFull[1:bound,];
data_testing = featureFull[(bound+1):nrow(featureFull),];
y_training = data_training$Label;
y_testing = data_testing$Label;
consensus_training = data_training$DeltaConsensus;
consensus_testing = data_testing$DeltaConsensus;
x_training = subset(data_training, select=-c(WeekId,Label));
x_testing = subset(data_testing, select=-c(WeekId,Label));
cvfit = cv.glmnet(x,y, type.measure="mse", nfolds=10, parallel=TRUE);
library(glmnet)
cvfit = cv.glmnet(x,y, type.measure="mse", nfolds=10, parallel=TRUE);
install.package("glmnet")
install.packages("glmnet")
install.packages("glmnet")
#readin data & initialization
path_featureAR = "../Features/AR/Features_AR_Delta.csv";
path_featureSocial = "../Features/201410/Features_All_candiate_seperated_AbsoluteFull.csv";
path_consensus = "../GroundTruth/Consensus.csv";
path_outMetric = "../Model/201410/experiments_AR_Model_2.csv";
featureARFull = read.csv(file=path_featureAR, head=TRUE, sep=",");
featureARFull$Date = as.character(featureARFull$Date)
for(i in 1:nrow(featureARFull))
{
featureARFull[i,'WeekId'] = DateToWeekTag(featureARFull[i,'Date']);
}
featureSocialFull = read.csv(file=path_featureSocial, head=TRUE, sep=",");
featureSocialFull$WeekId = as.character(featureSocialFull$WeekId)
for(i in 1:nrow(featureSocialFull))
{
featureSocialFull[i,'WeekId'] = DateToWeekTag(featureSocialFull[i,'WeekId']);
}
consensusFull = read.csv(file=path_consensus, head=TRUE, sep=",");
consensusFull$Date = as.character(consensusFull$Date)
for(i in 1:nrow(consensusFull))
{
consensusFull[i,'WeekId'] = DateToWeekTag(consensusFull[i,'Date']);
}
start_date = "20120106";
end_date = "20141010";
start_consensus_testing = "20140131";
end_consensus_testing = "20141003";
featureAR = featureARFull[which(featureARFull$WeekId==start_date)[1]:which(featureARFull$WeekId==end_date)[1],];
featureSocial = featureSocialFull[which(featureSocialFull$WeekId==start_date)[1]:which(featureSocialFull$WeekId==end_date)[1],];
featureConsensus = consensusFull[which(consensusFull$WeekId==start_date)[1]:which(consensusFull$WeekId==end_date)[1],];
consensus = consensusFull[which(consensusFull$WeekId==start_consensus_testing)[1]:which(consensusFull$WeekId==end_consensus_testing)[1],];
featureFull = merge(featureAR, featureSocial, by="WeekId");
featureFull = merge(featureFull, featureConsensus, by="WeekId");
featureFull = subset(featureFull, select=-c(Date.x,Date.y));
# Partition data into training and testing sets
bound = floor(nrow(featureFull)/4*3);
featureFull = featureFull[sample(nrow(featureFull)),];
data_training = featureFull[1:bound,];
data_testing = featureFull[(bound+1):nrow(featureFull),];
y_training = data_training$Label;
y_testing = data_testing$Label;
consensus_training = data_training$DeltaConsensus;
consensus_testing = data_testing$DeltaConsensus;
x_training = subset(data_training, select=-c(WeekId,Label));
x_testing = subset(data_testing, select=-c(WeekId,Label));
cvfit = cv.glmnet(x,y, type.measure="mse", nfolds=10, parallel=TRUE);
library(glmnet)
library('glmnet')
require(glmnet)
install.packages("glmnet")
require(glmnet)
library('glmnet')
library(glmnet)
cvfit = cv.glmnet(x,y, type.measure="mse", nfolds=10, parallel=TRUE);
